
LedProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000292  00000326  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000292  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000070  0080010e  0080010e  00000334  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001410  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cac  00000000  00000000  000018e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018fb  00000000  00000000  00002590  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000254  00000000  00000000  00003e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010888  00000000  00000000  000040e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009f8  00000000  00000000  00014968  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00015360  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003347  00000000  00000000  00015430  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	2d c0       	rjmp	.+90     	; 0x5c <__ctors_end>
   2:	00 00       	nop
   4:	78 c0       	rjmp	.+240    	; 0xf6 <__vector_1>
   6:	00 00       	nop
   8:	44 c0       	rjmp	.+136    	; 0x92 <__bad_interrupt>
   a:	00 00       	nop
   c:	42 c0       	rjmp	.+132    	; 0x92 <__bad_interrupt>
   e:	00 00       	nop
  10:	40 c0       	rjmp	.+128    	; 0x92 <__bad_interrupt>
  12:	00 00       	nop
  14:	3e c0       	rjmp	.+124    	; 0x92 <__bad_interrupt>
  16:	00 00       	nop
  18:	3c c0       	rjmp	.+120    	; 0x92 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3a c0       	rjmp	.+116    	; 0x92 <__bad_interrupt>
  1e:	00 00       	nop
  20:	38 c0       	rjmp	.+112    	; 0x92 <__bad_interrupt>
  22:	00 00       	nop
  24:	36 c0       	rjmp	.+108    	; 0x92 <__bad_interrupt>
  26:	00 00       	nop
  28:	34 c0       	rjmp	.+104    	; 0x92 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	32 c0       	rjmp	.+100    	; 0x92 <__bad_interrupt>
  2e:	00 00       	nop
  30:	30 c0       	rjmp	.+96     	; 0x92 <__bad_interrupt>
  32:	00 00       	nop
  34:	2e c0       	rjmp	.+92     	; 0x92 <__bad_interrupt>
  36:	00 00       	nop
  38:	2c c0       	rjmp	.+88     	; 0x92 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2a c0       	rjmp	.+84     	; 0x92 <__bad_interrupt>
  3e:	00 00       	nop
  40:	28 c0       	rjmp	.+80     	; 0x92 <__bad_interrupt>
  42:	00 00       	nop
  44:	26 c0       	rjmp	.+76     	; 0x92 <__bad_interrupt>
  46:	00 00       	nop
  48:	24 c0       	rjmp	.+72     	; 0x92 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__vector_19>
  4e:	00 00       	nop
  50:	20 c0       	rjmp	.+64     	; 0x92 <__bad_interrupt>
  52:	00 00       	nop
  54:	1e c0       	rjmp	.+60     	; 0x92 <__bad_interrupt>
  56:	00 00       	nop
  58:	1c c0       	rjmp	.+56     	; 0x92 <__bad_interrupt>
	...

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d8 e0       	ldi	r29, 0x08	; 8
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e2 e9       	ldi	r30, 0x92	; 146
  70:	f2 e0       	ldi	r31, 0x02	; 2
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	ae 30       	cpi	r26, 0x0E	; 14
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	21 e0       	ldi	r18, 0x01	; 1
  80:	ae e0       	ldi	r26, 0x0E	; 14
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	ae 37       	cpi	r26, 0x7E	; 126
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	fc d0       	rcall	.+504    	; 0x288 <main>
  90:	fe c0       	rjmp	.+508    	; 0x28e <_exit>

00000092 <__bad_interrupt>:
  92:	b6 cf       	rjmp	.-148    	; 0x0 <__vectors>

00000094 <adc_init>:



void adc_init(){
	
	ADMUX |= (1 << REFS0) | (1 << MUX0);
  94:	ec e7       	ldi	r30, 0x7C	; 124
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	81 64       	ori	r24, 0x41	; 65
  9c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE) | (1 << ADIE) | (1 << ADPS2) | (1 <<ADPS1);
  9e:	ea e7       	ldi	r30, 0x7A	; 122
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	8e 6e       	ori	r24, 0xEE	; 238
  a6:	80 83       	st	Z, r24
	sei();
  a8:	78 94       	sei
  aa:	08 95       	ret

000000ac <__vector_19>:
}

ISR(ADC_vect){
  ac:	1f 92       	push	r1
  ae:	0f 92       	push	r0
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	0f 92       	push	r0
  b4:	11 24       	eor	r1, r1
  b6:	2f 93       	push	r18
  b8:	3f 93       	push	r19
  ba:	4f 93       	push	r20
  bc:	5f 93       	push	r21
  be:	6f 93       	push	r22
  c0:	7f 93       	push	r23
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
  c6:	af 93       	push	r26
  c8:	bf 93       	push	r27
  ca:	ef 93       	push	r30
  cc:	ff 93       	push	r31
	USART_putstring("ADC_INTERRUPT");
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	cc d0       	rcall	.+408    	; 0x26c <USART_putstring>
  d4:	ff 91       	pop	r31
  d6:	ef 91       	pop	r30
  d8:	bf 91       	pop	r27
  da:	af 91       	pop	r26
  dc:	9f 91       	pop	r25
  de:	8f 91       	pop	r24
  e0:	7f 91       	pop	r23
  e2:	6f 91       	pop	r22
  e4:	5f 91       	pop	r21
  e6:	4f 91       	pop	r20
  e8:	3f 91       	pop	r19
  ea:	2f 91       	pop	r18
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <__vector_1>:
}

/************************************************************************/
/* The interrupt                                                        */
/************************************************************************/
ISR(INT0_vect){
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	2f 93       	push	r18
 102:	3f 93       	push	r19
 104:	4f 93       	push	r20
 106:	5f 93       	push	r21
 108:	6f 93       	push	r22
 10a:	7f 93       	push	r23
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
 110:	af 93       	push	r26
 112:	bf 93       	push	r27
 114:	ef 93       	push	r30
 116:	ff 93       	push	r31
	switch (state)
 118:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 11c:	81 30       	cpi	r24, 0x01	; 1
 11e:	59 f0       	breq	.+22     	; 0x136 <__vector_1+0x40>
 120:	18 f0       	brcs	.+6      	; 0x128 <__vector_1+0x32>
 122:	82 30       	cpi	r24, 0x02	; 2
 124:	79 f0       	breq	.+30     	; 0x144 <__vector_1+0x4e>
 126:	12 c0       	rjmp	.+36     	; 0x14c <__vector_1+0x56>
	{
	case 0:
		led_blue();
 128:	3c d0       	rcall	.+120    	; 0x1a2 <led_blue>
		state++;
 12a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 12e:	8f 5f       	subi	r24, 0xFF	; 255
 130:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
		break;
	case 1:
		led_green();
 134:	0d c0       	rjmp	.+26     	; 0x150 <__vector_1+0x5a>
 136:	23 d0       	rcall	.+70     	; 0x17e <led_green>
		state++;
 138:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 13c:	8f 5f       	subi	r24, 0xFF	; 255
 13e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
		break;
	case 2:
		led_red();
 142:	06 c0       	rjmp	.+12     	; 0x150 <__vector_1+0x5a>
 144:	40 d0       	rcall	.+128    	; 0x1c6 <led_red>
		state = 0;
 146:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
		break;
 14a:	02 c0       	rjmp	.+4      	; 0x150 <__vector_1+0x5a>
	default:
		state = 0;
 14c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 150:	8f e3       	ldi	r24, 0x3F	; 63
 152:	9c e9       	ldi	r25, 0x9C	; 156
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <__vector_1+0x5e>
 158:	00 c0       	rjmp	.+0      	; 0x15a <__vector_1+0x64>
 15a:	00 00       	nop
		break;
	}
	_delay_ms(10);
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	bf 91       	pop	r27
 162:	af 91       	pop	r26
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	7f 91       	pop	r23
 16a:	6f 91       	pop	r22
 16c:	5f 91       	pop	r21
 16e:	4f 91       	pop	r20
 170:	3f 91       	pop	r19
 172:	2f 91       	pop	r18
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <led_green>:
		leds[i-1].b = 0;
	}
	ws2812_setleds(leds,MAX_LEDS);
}

void led_green(){
 17e:	eb e7       	ldi	r30, 0x7B	; 123
 180:	f1 e0       	ldi	r31, 0x01	; 1
 182:	24 e2       	ldi	r18, 0x24	; 36
 184:	31 e0       	ldi	r19, 0x01	; 1
	for (int i = MAX_LEDS; i > 0; i--)
	{
		leds[i-1].r = 0;
		leds[i-1].g = 255;
 186:	8f ef       	ldi	r24, 0xFF	; 255
}

void led_green(){
	for (int i = MAX_LEDS; i > 0; i--)
	{
		leds[i-1].r = 0;
 188:	11 82       	std	Z+1, r1	; 0x01
		leds[i-1].g = 255;
 18a:	80 83       	st	Z, r24
		leds[i-1].b = 0;
 18c:	12 82       	std	Z+2, r1	; 0x02
 18e:	33 97       	sbiw	r30, 0x03	; 3
	}
	ws2812_setleds(leds,MAX_LEDS);
}

void led_green(){
	for (int i = MAX_LEDS; i > 0; i--)
 190:	e2 17       	cp	r30, r18
 192:	f3 07       	cpc	r31, r19
 194:	c9 f7       	brne	.-14     	; 0x188 <led_green+0xa>
	{
		leds[i-1].r = 0;
		leds[i-1].g = 255;
		leds[i-1].b = 0;
	}
	ws2812_setleds(leds,MAX_LEDS);
 196:	6d e1       	ldi	r22, 0x1D	; 29
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	87 e2       	ldi	r24, 0x27	; 39
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	25 c0       	rjmp	.+74     	; 0x1ea <ws2812_setleds>
 1a0:	08 95       	ret

000001a2 <led_blue>:
}

void led_blue(){
 1a2:	eb e7       	ldi	r30, 0x7B	; 123
 1a4:	f1 e0       	ldi	r31, 0x01	; 1
 1a6:	24 e2       	ldi	r18, 0x24	; 36
 1a8:	31 e0       	ldi	r19, 0x01	; 1
	for (int i = MAX_LEDS; i > 0; i--)
	{
		leds[i-1].r = 0;
		leds[i-1].g = 0;
		leds[i-1].b = 255;
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
}

void led_blue(){
	for (int i = MAX_LEDS; i > 0; i--)
	{
		leds[i-1].r = 0;
 1ac:	11 82       	std	Z+1, r1	; 0x01
		leds[i-1].g = 0;
 1ae:	10 82       	st	Z, r1
		leds[i-1].b = 255;
 1b0:	82 83       	std	Z+2, r24	; 0x02
 1b2:	33 97       	sbiw	r30, 0x03	; 3
	}
	ws2812_setleds(leds,MAX_LEDS);
}

void led_blue(){
	for (int i = MAX_LEDS; i > 0; i--)
 1b4:	e2 17       	cp	r30, r18
 1b6:	f3 07       	cpc	r31, r19
 1b8:	c9 f7       	brne	.-14     	; 0x1ac <led_blue+0xa>
	{
		leds[i-1].r = 0;
		leds[i-1].g = 0;
		leds[i-1].b = 255;
	}
	ws2812_setleds(leds,MAX_LEDS);
 1ba:	6d e1       	ldi	r22, 0x1D	; 29
 1bc:	70 e0       	ldi	r23, 0x00	; 0
 1be:	87 e2       	ldi	r24, 0x27	; 39
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	13 c0       	rjmp	.+38     	; 0x1ea <ws2812_setleds>
 1c4:	08 95       	ret

000001c6 <led_red>:
}

void led_red(){
 1c6:	eb e7       	ldi	r30, 0x7B	; 123
 1c8:	f1 e0       	ldi	r31, 0x01	; 1
 1ca:	24 e2       	ldi	r18, 0x24	; 36
 1cc:	31 e0       	ldi	r19, 0x01	; 1
	for (int i = MAX_LEDS; i > 0; i--)
	{
		leds[i-1].r = 255;
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	81 83       	std	Z+1, r24	; 0x01
		leds[i-1].g = 0;
 1d2:	10 82       	st	Z, r1
		leds[i-1].b = 0;
 1d4:	12 82       	std	Z+2, r1	; 0x02
 1d6:	33 97       	sbiw	r30, 0x03	; 3
	}
	ws2812_setleds(leds,MAX_LEDS);
}

void led_red(){
	for (int i = MAX_LEDS; i > 0; i--)
 1d8:	e2 17       	cp	r30, r18
 1da:	f3 07       	cpc	r31, r19
 1dc:	c9 f7       	brne	.-14     	; 0x1d0 <led_red+0xa>
	{
		leds[i-1].r = 255;
		leds[i-1].g = 0;
		leds[i-1].b = 0;
	}
	ws2812_setleds(leds,MAX_LEDS);
 1de:	6d e1       	ldi	r22, 0x1D	; 29
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	87 e2       	ldi	r24, 0x27	; 39
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	01 c0       	rjmp	.+2      	; 0x1ea <ws2812_setleds>
 1e8:	08 95       	ret

000001ea <ws2812_setleds>:
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
 1ea:	9b 01       	movw	r18, r22
 1ec:	22 0f       	add	r18, r18
 1ee:	33 1f       	adc	r19, r19
 1f0:	62 0f       	add	r22, r18
 1f2:	73 1f       	adc	r23, r19
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
 1f4:	22 9a       	sbi	0x04, 2	; 4
  
  masklo	=~maskhi&ws2812_PORTREG;
 1f6:	25 b1       	in	r18, 0x05	; 5
 1f8:	2b 7f       	andi	r18, 0xFB	; 251
  maskhi |=        ws2812_PORTREG;
 1fa:	35 b1       	in	r19, 0x05	; 5
 1fc:	34 60       	ori	r19, 0x04	; 4
  
  sreg_prev=SREG;
 1fe:	4f b7       	in	r20, 0x3f	; 63
  cli();  
 200:	f8 94       	cli

  while (datlen--) {
 202:	61 15       	cp	r22, r1
 204:	71 05       	cpc	r23, r1
 206:	b1 f0       	breq	.+44     	; 0x234 <loop54+0x22>
 208:	fc 01       	movw	r30, r24
 20a:	68 0f       	add	r22, r24
 20c:	79 1f       	adc	r23, r25
    curbyte=*data++;
 20e:	91 91       	ld	r25, Z+
    
    asm volatile(
 210:	88 e0       	ldi	r24, 0x08	; 8

00000212 <loop54>:
 212:	35 b9       	out	0x05, r19	; 5
 214:	00 00       	nop
 216:	00 c0       	rjmp	.+0      	; 0x218 <loop54+0x6>
 218:	97 ff       	sbrs	r25, 7
 21a:	25 b9       	out	0x05, r18	; 5
 21c:	99 0f       	add	r25, r25
 21e:	00 00       	nop
 220:	00 c0       	rjmp	.+0      	; 0x222 <loop54+0x10>
 222:	00 c0       	rjmp	.+0      	; 0x224 <loop54+0x12>
 224:	00 c0       	rjmp	.+0      	; 0x226 <loop54+0x14>
 226:	25 b9       	out	0x05, r18	; 5
 228:	00 c0       	rjmp	.+0      	; 0x22a <loop54+0x18>
 22a:	8a 95       	dec	r24
 22c:	91 f7       	brne	.-28     	; 0x212 <loop54>
  maskhi |=        ws2812_PORTREG;
  
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
 22e:	e6 17       	cp	r30, r22
 230:	f7 07       	cpc	r31, r23
 232:	69 f7       	brne	.-38     	; 0x20e <ws2812_setleds+0x24>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
 234:	4f bf       	out	0x3f, r20	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 236:	8f ea       	ldi	r24, 0xAF	; 175
 238:	94 e0       	ldi	r25, 0x04	; 4
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <loop54+0x28>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <loop54+0x2e>
 240:	00 00       	nop
 242:	08 95       	ret

00000244 <USART_init>:
unsigned char USART_receive(void){
	
	while(!(UCSR0A & (1<<RXC0)));
	return UDR0;
	
}
 244:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 248:	87 e6       	ldi	r24, 0x67	; 103
 24a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 24e:	88 e1       	ldi	r24, 0x18	; 24
 250:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 254:	86 e0       	ldi	r24, 0x06	; 6
 256:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 25a:	08 95       	ret

0000025c <USART_send>:
 25c:	e0 ec       	ldi	r30, 0xC0	; 192
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	90 81       	ld	r25, Z
 262:	95 ff       	sbrs	r25, 5
 264:	fd cf       	rjmp	.-6      	; 0x260 <USART_send+0x4>
 266:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 26a:	08 95       	ret

0000026c <USART_putstring>:

void USART_putstring(char* StringPtr){
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	ec 01       	movw	r28, r24
	
	while(*StringPtr != 0x00){    //Here we check if there is still more chars to send, this is done checking the actual char and see if it is different from the null char
 272:	88 81       	ld	r24, Y
 274:	88 23       	and	r24, r24
 276:	29 f0       	breq	.+10     	; 0x282 <USART_putstring+0x16>
 278:	21 96       	adiw	r28, 0x01	; 1
		USART_send(*StringPtr);    //Using the simple send function we send one char at a time
 27a:	f0 df       	rcall	.-32     	; 0x25c <USART_send>
	
}

void USART_putstring(char* StringPtr){
	
	while(*StringPtr != 0x00){    //Here we check if there is still more chars to send, this is done checking the actual char and see if it is different from the null char
 27c:	89 91       	ld	r24, Y+
 27e:	81 11       	cpse	r24, r1
 280:	fc cf       	rjmp	.-8      	; 0x27a <USART_putstring+0xe>
		USART_send(*StringPtr);    //Using the simple send function we send one char at a time
	StringPtr++;}        //We increment the pointer so we can read the next char
	
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <main>:
{
	//sysclk_init();
	//board_init();
	//initLeds();
	//initBtns();
	USART_init();
 288:	dd df       	rcall	.-70     	; 0x244 <USART_init>
	adc_init();
 28a:	04 df       	rcall	.-504    	; 0x94 <adc_init>
 28c:	ff cf       	rjmp	.-2      	; 0x28c <main+0x4>

0000028e <_exit>:
 28e:	f8 94       	cli

00000290 <__stop_program>:
 290:	ff cf       	rjmp	.-2      	; 0x290 <__stop_program>
